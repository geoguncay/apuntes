{
  "Log": {
    "prefix": "log",
    "body": ["console.log($0);"],
    "description": "Log"
  },

  "Log a string": {
    "prefix": "logs",
    "body": ["console.log('$0');"],
    "description": "Log string"
  },


  "Log an object": {
    "prefix": "logo",
    "body": ["console.log('$1 :', JSON.stringify($1));"],
    "description": "Log object"
  },


  "JSON.stringify()": {
    "prefix": "json",
    "body": ["JSON.stringify($0)"],
    "description": "JSON.stringify()"
  },


  "JSON.parse()": {
    "prefix": "jsonp",
    "body": ["JSON.parse($0)"],
    "description": "JSON.parse()"
  },


  "setState({..})": {
    "prefix": "ss",
    "body": ["this.setState({ $0 })"],
    "description": "this.setState({...})) (sync)"
  },


  "setState((state) => ({..})": {
    "prefix": "ssa",
    "body": ["this.setState(state => ({ $0 }))", "$0"],
    "description": "this.setState((state => ({..}))"
  },


  "setState((state, props) => ({..})": {
    "prefix": "ssp",
    "body": ["this.setState((state, props) => ({ $0 }))", "$0"],
    "description": "this.setState((state, props) => ({..}))"
  },


  "this.state.": {
    "prefix": "ts",
    "body": ["this.state.$0"],
    "description": "this.state."
  },


  "this.props.": {
    "prefix": "tp",
    "body": ["this.props.$0"],
    "description": "this.props."
  },

  
  "log props": {
    "prefix": "lpr",
    "body": ["console.log('props', this.props)"],
    "description": "console.log(this.props);"
  },


  "log state": {
    "prefix": "ls",
    "body": ["console.log('state', this.state);"],
    "description": "console.log(this.state)"
  },


  "attr={..}": {
    "prefix": "at",
    "body": ["${1:attr}={${2:value}}$0"],
    "description": "JSX attribute"
  },


  "Jest Test Suite": {
    "prefix": "desc",
    "body": ["describe('$1', () => {", "   $0", "});"],
    "description": "describe('$1', () => {...})"
  },


  "Snapshot Test": {
    "prefix": "snap",
    "body": [
      "import * as React from 'react';",
      "import * as renderer from 'react-test-renderer';",
      "",
      "import $1 from './$1';",
      "",
      "describe('<$1 />', () => {",
      "",
      "  it('renders $1 correctly', () => {",
      "     const tree = renderer.create(",
      "         <$1 $0 />",
      "     ).toJSON();",
      "     expect(tree).toMatchSnapshot();",
      "  });",
      "",
      "});",
      ""
    ],
    "description": "Jest Snapshot test"
  },


  "Snapshot Test, named import": {
    "prefix": "snape",
    "body": [
      "import * as React from 'react';",
      "import * as renderer from 'react-test-renderer';",
      "",
      "import { $1 } from './$1';",
      "",
      "describe('<$1 />', () => {",
      "",
      "  it('renders $1 correctly', () => {",
      "     const tree = renderer.create(",
      "         <$1 $0 />",
      "     ).toJSON();",
      "     expect(tree).toMatchSnapshot();",
      "  });",
      "",
      "});",
      ""
    ],
    "description": "Jest Snapshot test, named module import"
  },


  "Snapshot Test with React Router ": {
    "prefix": "snapr",
    "body": [
      "import * as React from 'react';",
      "import * as renderer from 'react-test-renderer';",
      "",
      "import { StaticRouter } from 'react-router-dom';",
      "import $1 from './$1';",
      "",
      "describe('<$1 />', () => {",
      "",
      "  it('renders $1 correctly', () => {",
      "     const tree = renderer.create(",
      "       <StaticRouter context={{}}>",
      "         <$1 $0 />",
      "       </StaticRouter>",
      "     ).toJSON();",
      "     expect(tree).toMatchSnapshot();",
      "  });",
      "",
      "});",
      ""
    ],
    "description": "Jest Snapshot test with React Router"
  },


  "Snapshot Test with React Router (named export)": {
    "prefix": "snaper",
    "body": [
      "import * as React from 'react';",
      "import * as renderer from 'react-test-renderer';",
      "",
      "import { StaticRouter } from 'react-router-dom';",
      "import { $1 } from './$1';",
      "",
      "describe('<$1 />', () => {",
      "",
      "  it('renders $1 correctly', () => {",
      "     const tree = renderer.create(",
      "       <StaticRouter context={{}}>",
      "         <$1 $0 />",
      "       </StaticRouter>",
      "     ).toJSON();",
      "     expect(tree).toMatchSnapshot();",
      "  });",
      "",
      "});",
      ""
    ],
    "description": "Jest Snapshot test with React Router"
  },


  "Enzyme test file, shallow": {
    "prefix": "ens",
    "body": [
      "import * as React from 'react';",
      "import { shallow } from 'enzyme'",
      "",
      "import { $1 } from './$1';",
      "",
      "describe('<$1 />', () => {",
      "",
      "  it('should $2', () => {",
      "     const tree = shallow(<$1 $0 />);",
      "     ",
      "     expect(tree).toBeTruthy()",
      "  });",
      "",
      "});",
      ""
    ],
    "description": "Test file, Enzyme shallow"
  },


  "Enzyme test file, mount": {
    "prefix": "enm",
    "body": [
      "import * as React from 'react';",
      "import { mount } from 'enzyme'",
      "",
      "import { $1 } from './$1';",
      "",
      "describe('<$1 />', () => {",
      "",
      "  it('should $2', () => {",
      "     const tree = mount(<$1 $0 />);",
      "     ",
      "     expect(tree).toBeTruthy()",
      "  });",
      "",
      "});",
      ""
    ],
    "description": "Test file, Enzyme mount"
  },



  "React Stateless Functional Component": {
    "prefix": "rsc",
    "body": [
      "",
      "export interface $1Props {",
      "  $2",
      "}",
      "",
      "export const $1: React.SFC<$1Props> = (props) => {",
      "  return (",
      "    $0",
      "  );",
      "};",
      "",
      "$1.displayName = '$1'",
      ""
    ],
    "description": "React Stateless Functional Component"
  },
  

  "React Class Component": {
    "prefix": "rccdm",
    "body": [
      "",
      "export interface $1Props {",
      "  $2",
      "}",
      "",
      "export interface $1State {",
      "  $3",
      "}",
      "",
      "export class $1 extends React.Component<$1Props, $1State> {",
      "  componentDidMount() {",
      "    $0",
      "  }",
      "",
      "  render() {",
      "    return (",
      "      <div>Hello</div>",
      "    );",
      "  }",
      "}",
      ""
    ],
    "description": "React Class Component"
  },
  
  "Funtion": {
    "prefix": "ft",
    "body": [ "function $1 ($2) {",
    "  $3",
    "  return $4",
    "}"
    ],
    "description": "Const"
  },


  "Bucle for": {
    "prefix": "bfor",
    "body": ["for($1 ; $2; $3){",
      "$0",
    "}"
    ],
    "description": "Bucle for"
  }
}